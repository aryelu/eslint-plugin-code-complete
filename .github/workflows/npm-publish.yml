name: NPM Publish with Trusted Publishers

on:
  workflow_call:
    inputs:
      use_trusted_publishing:
        description: 'Use NPM Trusted Publishers (requires setup on npmjs.com)'
        type: boolean
        default: true
    secrets:
      NPM_TOKEN:
        description: 'NPM token (fallback if trusted publishing not configured)'
        required: false
  workflow_dispatch:
    inputs:
      use_trusted_publishing:
        description: 'Use NPM Trusted Publishers (requires setup on npmjs.com)'
        type: boolean
        default: true

permissions:
  contents: write # Required for creating tags and releases
  id-token: write # Required for NPM trusted publishing

jobs:
  publish:
    name: Publish to NPM
    runs-on: ubuntu-latest
    environment: production

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'pnpm'
          registry-url: 'https://registry.npmjs.org'

      - name: Install dependencies
        run: |
          pnpm install --frozen-lockfile || {
            echo "Frozen lockfile failed, falling back to regular install"
            pnpm install
          }

      - name: Build
        run: pnpm run build

      - name: Publish with Trusted Publishers
        if: ${{ inputs.use_trusted_publishing }}
        run: |
          echo "Publishing with NPM Trusted Publishers (provenance enabled)"
          pnpm publish --no-git-checks --provenance --access public
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

      - name: Publish with Token (Fallback)
        if: ${{ !inputs.use_trusted_publishing }}
        run: |
          echo "Publishing with NPM token (fallback method)"
          pnpm publish --no-git-checks --access public
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

      - name: Get package version
        id: package-version
        run: echo "version=$(node -p "require('./package.json').version")" >> $GITHUB_OUTPUT

      - name: Create git tag
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git tag -a "v${{ steps.package-version.outputs.version }}" -m "Release v${{ steps.package-version.outputs.version }}"
          git push origin "v${{ steps.package-version.outputs.version }}"

      - name: Create GitHub Release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ steps.package-version.outputs.version }}
          release_name: Release v${{ steps.package-version.outputs.version }}
          body: |
            ## 📦 eslint-plugin-code-complete v${{ steps.package-version.outputs.version }}

            ### Installation
            ```bash
            npm install eslint-plugin-code-complete@${{ steps.package-version.outputs.version }}
            ```

            ### What's Changed
            See [CHANGELOG.md](https://github.com/aryelu/code-complete-eslint/blob/main/CHANGELOG.md) for detailed changes.

            ### Verification
            This package was published with provenance statements for enhanced security and transparency.

            ---
            🔗 **NPM Package**: https://www.npmjs.com/package/eslint-plugin-code-complete
          draft: false
          prerelease: false

      - name: Output publish result
        run: |
          echo "✅ Package published successfully!"
          echo "📦 Package: eslint-plugin-code-complete@${{ steps.package-version.outputs.version }}"
          echo "🔗 NPM: https://www.npmjs.com/package/eslint-plugin-code-complete"
          echo "🏷️ Tag: v${{ steps.package-version.outputs.version }}"
          echo "🚀 Release: https://github.com/aryelu/code-complete-eslint/releases/tag/v${{ steps.package-version.outputs.version }}"